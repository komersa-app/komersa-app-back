openapi: 3.0.3
info:
  version: "1.0.0"
  title: "Resource API"
  description: "API for managing resources such as user, visitor, appointment, car, detail, image, and price."
servers:
  - url: "http://localhost:8080/api"

paths:
  /admins:
    get:
      summary: "Get all admins"
      operationId: "getAllAdmins"
      responses:
        '200':
          description: "A list of admins"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminDtoResponse'

    put:
      summary: "Save or update an admin"
      operationId: "saveOrUpdateAdmin"
      requestBody:
        description: "Admin to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDtoRequest'
      responses:
        '200':
          description: "Admin saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDtoResponse'

  /admins/{id}:
    get:
      summary: "Get an admin by ID"
      operationId: "getAdminById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "A single admin"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDtoResponse'
        '404':
          description: "Admin not found"
    delete:
      summary: "Delete an admin by ID"
      operationId: "deleteAdminById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: "Admin deleted"
        '404':
          description: "Admin not found"

  /visitors:
    get:
      summary: "Get all visitors"
      operationId: "getAllVisitors"
      responses:
        '200':
          description: "A list of visitors"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VisitorDtoResponse'
    put:
      summary: "Save or update a visitor"
      operationId: "saveOrUpdateVisitor"
      requestBody:
        description: "Visitor to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VisitorDtoRequest'
      responses:
        '200':
          description: "Visitor saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitorDtoResponse'

  /visitors/{id}:
    get:
      summary: "Get a visitor by ID"
      operationId: "getVisitorById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "A single visitor"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitorDtoResponse'
        '404':
          description: "Visitor not found"
    delete:
      summary: "Delete a visitor by ID"
      operationId: "deleteVisitorById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: "Visitor deleted"
        '404':
          description: "Visitor not found"

  /appointments:
    get:
      summary: "Get all appointments"
      operationId: "getAllAppointments"
      responses:
        '200':
          description: "A list of appointments"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentDtoResponse'
    put:
      summary: "Save or update an appointment"
      operationId: "saveOrUpdateAppointment"
      requestBody:
        description: "Appointment to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentDtoRequest'
      responses:
        '200':
          description: "Appointment saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentDtoResponse'

  /appointments/{id}:
    get:
      summary: "Get an appointment by ID"
      operationId: "getAppointmentById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "A single appointment"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentDtoResponse'
        '404':
          description: "Appointment not found"
    delete:
      summary: "Delete an appointment by ID"
      operationId: "deleteAppointmentById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: "Appointment deleted"
        '404':
          description: "Appointment not found"

  /cars:
    get:
      summary: "Get all cars"
      operationId: "getAllCars"
      responses:
        '200':
          description: "A list of cars"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarDtoResponse'
    put:
      summary: "Save or update a car"
      operationId: "saveOrUpdateCar"
      requestBody:
        description: "Car to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarDtoRequest'
      responses:
        '200':
          description: "Car saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDtoResponse'

  /cars/{id}:
    get:
      summary: "Get a car by ID"
      operationId: "getCarById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "A single car"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDtoResponse'
        '404':
          description: "Car not found"
    delete:
      summary: "Delete a car by ID"
      operationId: "deleteCarById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: "Car deleted"
        '404':
          description: "Car not found"

  /details:
    get:
      summary: "Get all details"
      operationId: "getAllDetails"
      responses:
        '200':
          description: "A list of details"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailsDtoResponse'
    put:
      summary: "Save or update a detail"
      operationId: "saveOrUpdateDetail"
      requestBody:
        description: "Detail to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailsDtoRequest'
      responses:
        '200':
          description: "Detail saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailsDtoResponse'

  /details/{id}:
    get:
      summary: "Get a detail by ID"
      operationId: "getDetailById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "A single detail"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailsDtoResponse'
        '404':
          description: "Detail not found"
    delete:
      summary: "Delete a detail by ID"
      operationId: "deleteDetailById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: "Detail deleted"
        '404':
          description: "Detail not found"

  /images:
    get:
      summary: "Get all images"
      operationId: "getAllImages"
      responses:
        '200':
          description: "A list of images"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageDtoResponse'
    put:
      summary: "Save or update an image"
      operationId: "saveOrUpdateImage"
      requestBody:
        description: "Image to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageDtoRequest'
      responses:
        '200':
          description: "Image saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDtoResponse'

  /images/{id}:
    get:
      summary: "Get an image by ID"
      operationId: "getImageById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "A single image"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDtoResponse'
        '404':
          description: "Image not found"
    delete:
      summary: "Delete an image by ID"
      operationId: "deleteImageById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: "Image deleted"
        '404':
          description: "Image not found"

  /prices:
    get:
      summary: "Get all prices"
      operationId: "getAllPrices"
      responses:
        '200':
          description: "A list of prices"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PriceDtoResponse'
    put:
      summary: "Save or update a price"
      operationId: "saveOrUpdatePrice"
      requestBody:
        description: "Price to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceDtoRequest'
      responses:
        '200':
          description: "Price saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceDtoResponse'

  /prices/{id}:
    get:
      summary: "Get a price by ID"
      operationId: "getPriceById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "A single price"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceDtoResponse'
        '404':
          description: "Price not found"
    delete:
      summary: "Delete a price by ID"
      operationId: "deletePriceById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: "Price deleted"
        '404':
          description: "Price not found"

  /login:
    post:
      summary: "Authenticate Admin"
      operationId: "athenticateAdmin"
      requestBody:
        description: "Admin's Credentials"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDtoRequest'
      responses:
        '200':
          description: "Admin's Token with name"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginDtoResponse'

components:
  schemas:
    AdminDtoRequest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "john"
        email:
          type: string
          example: "johndoe@example.com"
        tel:
          type: string
          example: "0340000000"
        password:
          type: string
          example: "password"
      #example:
        #$ref: '#/components/examples/AdminDtoRequestExample'

    AdminDtoResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "john"
        email:
          type: string
          example: "johndoe@example.com"
        tel:
          type: string
          example: "0340000000"
      #example:
        #$ref: '#/components/examples/AdminDtoResponseExample'
          
    VisitorDtoRequest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "jane"
        email:
          type: string
          example: "janedoe@example.com"
        tel:
          type: string
          example: "0341000000"
        message:
          type: string
          example: "Just do it"
      #example:
        #$ref: '#/components/examples/VisitorDtoRequestExample'
          
    VisitorDtoResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "jane"
        email:
          type: string
          example: "janedoe@example.com"
        tel:
          type: string
          example: "0341000000"
        message:
          type: string
          example: "Just do it"
      #example:
        #$ref: '#/components/examples/VisitorDtoResponseExample'

    AppointmentDtoRequest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: " appointment"
        datetime:
          type: string
          format: date-time
          example: "2024-06-15T10:00:00Z"
        status:
          type: string
          enum:
            - "pending"
            - "validated"
            - "rejected"
            - "archived"
          example: "pending"
        carId:
          type: integer
          example: 1
        adminId:
          type: integer
          example: 1
        visitorId:
          type: integer
          example: 1
      #example:
        #$ref: '#/components/examples/AppointmentDtoRequestExample'

    AppointmentDtoResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: " appointment"
        datetime:
          type: string
          format: date-time
          example: "2024-06-15T10:00:00Z"
        status:
          type: string
          enum:
            - "pending"
            - "validated"
            - "rejected"
            - "archived"
          example: "pending"
        car:
          $ref: '#/components/schemas/CarDtoResponse'
        admin:
          $ref: '#/components/schemas/AdminDtoResponse'
        visitor:
          $ref: '#/components/schemas/VisitorDtoResponse'
      #example:
        #$ref: '#/components/examples/AppointmentDtoResponseExample'

    CarDtoRequest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Tesla"
        description:
          type: string
          example: "Tesla Model S"
        color:
          type: string
          example: "red"
        motor-type:
          type: integer
          example: "electric"
        power:
          type: string
          example: "250horsepower"
        status:
          type: string
          enum:
            - "pinned"
            - "not_pinned"
          example: "pinned"
        type:
          type: string
          example: "Electric sedan"
        detailsId:
          type: integer
          example: 1
        priceId:
          type: integer
          example: 1
      #example:
        #$ref: '#/components/examples/CarDtoRequestExample'
          
    CarDtoResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Tesla"
        description:
          type: string
          example: "Tesla Model S"
        color:
          type: string
          example: "red"
        motor-type:
          type: integer
          example: "electric"
        power:
          type: string
          example: "250horsepower"
        status:
          type: string
          enum:
            - "pinned"
            - "not_pinned"
          example: "pinned"
        type:
          type: string
          example: "Electric sedan"
        details:
          $ref: '#/components/schemas/DetailsDtoResponse'
        price:
          $ref: '#/components/schemas/PriceDtoResponse'
      #example:
        #$ref: '#/components/examples/CarDtoResponseExample'

    DetailsDtoRequest:
      type: object
      properties:
        id:
          type: string
          example: 1
        brand:
          type: string
          example: "Tesla"
        model:
          type: string
          example: "S"
      #example:
        #$ref: '#/components/examples/DetailsDtoRequestExample'

    DetailsDtoResponse:
      type: object
      properties:
        id:
          type: string
          example: 1
        brand:
          type: string
          example: "Tesla"
        model:
          type: string
          example: "S"
      #example:
        #$ref: '#/components/examples/DetailsDtoResponseExample'
          
    ImageDtoRequest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        url:
          type: string
          example: "http://example.com/image.jpg"
        carId:
          type: integer
          example: 1
      #example:
        #$ref: '#/components/examples/ImageDtoRequestExample'

    ImageDtoResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        url:
          type: string
          example: "http://example.com/image.jpg"
        car:
          $ref: '#/components/schemas/CarDtoResponse'
      #example:
        #$ref: '#/components/examples/ImageDtoResponseExample'

    PriceDtoRequest:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
          format: double
          example: "200_000.0"
        change-datetime:
          type: string
          format: date-time
          example: "2024-06-15T10:00:00Z"
        carId:
          type: integer
          example: 1
      #example:
          #$ref: '#/components/examples/PriceDtoRequestExample'

    PriceDtoResponse:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
          format: double
          example: "200_000.0"
        change-datetime:
          type: string
          format: date-time
          example: "2024-06-15T10:00:00Z"
        car:
          $ref: '#/components/schemas/CarDtoResponse'
      #example:
          #$ref: '#/components/examples/PriceDtoResponseExample'

    LoginDtoRequest:
      type: object
      properties:
        name:
          type: string
          example: "john"
        password:
          type: string
          example: "password"
      #example:
        #$ref: '#/components/examples/LoginDtoRequestExample'

    LoginDtoResponse:
      type: object
      properties:
        name:
          type: string
          example: "john"
        token:
          type: string
          example: "kgljsfjgsjgjsjf-jmljmlklkjmll.kjjkjjfjdffairer"
      #example:
        #$ref: '#/components/examples/LoginDtoResponseExample'

    # TODO: Schema & Ex for Login attempts

  examples:
    AdminDtoRequestExample:
      value:
        id: 1
        name: "john"
        email: "johndoe@example.com"
        tel: "0340000000"
        password: "password"
    AdminDtoResponseExample:
      value:
        id: 1
        name: "john"
        email: "johndoe@example.com"
        tel: "0340000000"
    VisitorDtoRequestExample:
      value:
        id: 1
        name: "Jane"
        email: "janedoe@example.com"
        tel: "0341000000"
        message: "Just do it"
    VisitorDtoResponseExample:
      value:
        id: 1
        name: "Jane"
        email: "janedoe@example.com"
        tel: "0341000000"
        message: "Just do it"
    AppointmentDtoRequestExample:
      value:
        id: 1
        name: " appointment"
        datetime: "2024-06-15T10:00:00Z"
        status: "pending"
        carId: 1
        adminId: 1
        visitorId: 1
    AppointmentDtoResponseExample:
      value:
        id: 1
        name: " appointment"
        datetime: "2024-06-15T10:00:00Z"
        status: "pending"
        car:
          $ref: '#/components/examples/CarDtoResponseExample'
        admin:
          $ref: '#/components/examples/AdminDtoResponseExample'
        visitor:
          $ref: '#/components/examples/AdminDtoResponseExample'
    CarDtoRequestExample:
      value:
        id: 1
        name: "Tesla"
        description: "Tesla Model S"
        color: "red"
        motor-type: "electric"
        power: "250horsepower"
        status: "pinned"
        type: "Electric sedan"
        detailsId: 1
        priceId: 1
    CarDtoResponseExample:
      value:
        id: 1
        name: "Tesla"
        description: "Tesla Model S"
        color: "red"
        motor-type: "electric"
        power: "250horsepower"
        status: "pinned"
        type: "Electric sedan"
        details:
          $ref: '#/components/examples/DetailsDtoResponseExample'
        price:
          $ref: '#/components/examples/PriceDtoResponseExample'
    DetailsDtoRequestExample:
      value:
        id: 1
        brand: "Tesla"
        model: "S"
    DetailsDtoResponseExample:
      value:
        id: 1
        brand: "Tesla"
        model: "S"
    ImageDtoRequestExample:
      value:
        id: 1
        url: "http://example.com/image.jpg"
        carId: 1
    ImageDtoResponseExample:
      value:
        id: 1
        url: "http://example.com/image.jpg"
        car:
          $ref: '#/components/examples/CarDtoResponseExample'
    PriceDtoRequestExample:
      value:
        id: 1
        amount: "200_000.0"
        change-datetime: "2024-06-15T10:00:00Z"
        carId: 1
    PriceDtoResponseExample:
      value:
        id: 1
        amount: "200_000.0"
        change-datetime: "2024-06-15T10:00:00Z"
        car:
          $ref: '#/components/examples/CarDtoResponseExample'
    LoginDtoRequestExample:
      value:
        name: "john"
        password: "password"
    LoginDtoResponseExample:
      value:
        name: "john"
        token: "ksogfuoiarnotirztoirztnn-oijoijoiotrzo.oiuouiuigoiois"
