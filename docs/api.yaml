openapi: 3.0.3
info:
  version: "1.0.0"
  title: "Resource API"
  description: "API for managing resources such as user, visitor, appointment, car, detail, image, and price."
servers:
  - url: "http://localhost:8080/api"

paths:
  /admins:
    get:
      summary: "Get all admins"
      operationId: "getAllAdmins"
      responses:
        '200':
          description: "A list of admins"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admin'

    put:
      summary: "Save or update an admin"
      operationId: "saveOrUpdateAdmin"
      requestBody:
        description: "Admin to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
      responses:
        '200':
          description: "Admin saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'

  /admins/{id}:
    get:
      summary: "Get an admin by ID"
      operationId: "getAdminById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: "A single admin"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
        '404':
          description: "Admin not found"
    delete:
      summary: "Delete an admin by ID"
      operationId: "deleteAdminById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '204':
          description: "Admin deleted"
        '404':
          description: "Admin not found"

  /visitors:
    get:
      summary: "Get all visitors"
      operationId: "getAllVisitors"
      responses:
        '200':
          description: "A list of visitors"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visitor'
    put:
      summary: "Save or update a visitor"
      operationId: "saveOrUpdateVisitor"
      requestBody:
        description: "Visitor to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Visitor'
      responses:
        '200':
          description: "Visitor saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visitor'

  /visitors/{id}:
    get:
      summary: "Get a visitor by ID"
      operationId: "getVisitorById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: "A single visitor"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visitor'
        '404':
          description: "Visitor not found"
    delete:
      summary: "Delete a visitor by ID"
      operationId: "deleteVisitorById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '204':
          description: "Visitor deleted"
        '404':
          description: "Visitor not found"

  /appointments:
    get:
      summary: "Get all appointments"
      operationId: "getAllAppointments"
      responses:
        '200':
          description: "A list of appointments"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
    put:
      summary: "Save or update an appointment"
      operationId: "saveOrUpdateAppointment"
      requestBody:
        description: "Appointment to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: "Appointment saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'

  /appointments/{id}:
    get:
      summary: "Get an appointment by ID"
      operationId: "getAppointmentById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: "A single appointment"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: "Appointment not found"
    delete:
      summary: "Delete an appointment by ID"
      operationId: "deleteAppointmentById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '204':
          description: "Appointment deleted"
        '404':
          description: "Appointment not found"

  /cars:
    get:
      summary: "Get all cars"
      operationId: "getAllCars"
      responses:
        '200':
          description: "A list of cars"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
    put:
      summary: "Save or update a car"
      operationId: "saveOrUpdateCar"
      requestBody:
        description: "Car to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '200':
          description: "Car saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'

  /cars/{id}:
    get:
      summary: "Get a car by ID"
      operationId: "getCarById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: "A single car"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '404':
          description: "Car not found"
    delete:
      summary: "Delete a car by ID"
      operationId: "deleteCarById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '204':
          description: "Car deleted"
        '404':
          description: "Car not found"

  /details:
    get:
      summary: "Get all details"
      operationId: "getAllDetails"
      responses:
        '200':
          description: "A list of details"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Detail'
    put:
      summary: "Save or update a detail"
      operationId: "saveOrUpdateDetail"
      requestBody:
        description: "Detail to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Detail'
      responses:
        '200':
          description: "Detail saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'

  /details/{id}:
    get:
      summary: "Get a detail by ID"
      operationId: "getDetailById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: "A single detail"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
        '404':
          description: "Detail not found"
    delete:
      summary: "Delete a detail by ID"
      operationId: "deleteDetailById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '204':
          description: "Detail deleted"
        '404':
          description: "Detail not found"

  /images:
    get:
      summary: "Get all images"
      operationId: "getAllImages"
      responses:
        '200':
          description: "A list of images"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
    put:
      summary: "Save or update an image"
      operationId: "saveOrUpdateImage"
      requestBody:
        description: "Image to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        '200':
          description: "Image saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'

  /images/{id}:
    get:
      summary: "Get an image by ID"
      operationId: "getImageById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: "A single image"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '404':
          description: "Image not found"
    delete:
      summary: "Delete an image by ID"
      operationId: "deleteImageById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '204':
          description: "Image deleted"
        '404':
          description: "Image not found"

  /prices:
    get:
      summary: "Get all prices"
      operationId: "getAllPrices"
      responses:
        '200':
          description: "A list of prices"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'
    put:
      summary: "Save or update a price"
      operationId: "saveOrUpdatePrice"
      requestBody:
        description: "Price to save or update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Price'
      responses:
        '200':
          description: "Price saved or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'

  /prices/{id}:
    get:
      summary: "Get a price by ID"
      operationId: "getPriceById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: "A single price"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '404':
          description: "Price not found"
    delete:
      summary: "Delete a price by ID"
      operationId: "deletePriceById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "1"
      responses:
        '204':
          description: "Price deleted"
        '404':
          description: "Price not found"

components:
  schemas:
    Admin:
      type: object
      properties:
        id:
          type: integer
        firstname:
          type: string
        email:
          type: string
        tel:
          type: string
        password:
          type: string
      example:
        $ref: '#/components/examples/AdminExample'

    Visitor:
      type: object
      properties:
        id:
          type: integer
        firstname:
          type: string
        email:
          type: string
        tel:
          type: string
        message:
          type: string
      example:
        $ref: '#/components/examples/VisitorExample'

    Appointment:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        datetime:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - pending
            - validated
            - rejected
            - archived
      example:
        $ref: '#/components/examples/AppointmentExample'

    Car:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        color:
          type: string
        motor-type:
          type: integer
        power:
          type: string
        status:
          type: string
          enum:
            - pinned
            - not_pinned
        type:
          type: string
      example:
        $ref: '#/components/examples/CarExample'

    Detail:
      type: object
      properties:
        id:
          type: string
        brand:
          type: string
        model:
          type: string
      example:
        $ref: '#/components/examples/DetailExample'

    Image:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
      example:
        $ref: '#/components/examples/ImageExample'

    Price:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
          format: double
        change-datetime:
          type: string
          format: date-time
        example:
          $ref: '#/components/examples/PriceExample'

  examples:
    AdminExample:
      value:
        id: "1"
        firstname: "john"
        email: "johndoe@example.com"
        password: "********"
    VisitorExample:
      value:
        id: "1"
        firstname: "Jane"
        email: "janedoe@example.com"
    AppointmentExample:
      value:
        id: "1"
        name: "first appointment"
        datetime: "2024-06-15T10:00:00Z"
        status: "pending"
    CarExample:
      value:
        id: "1"
        name: "Tesla"
        description: "Tesla Model S"
        motor-type: "electric"
        power: "250horsepower"
        status: "pinned"
        type: "Electric sedan"
    DetailExample:
      value:
        id: "1"
        brand: "Tesla"
        model: "S"
    ImageExample:
      value:
        id: "1"
        url: "http://example.com/image.jpg"
    PriceExample:
      value:
        id: "1"
        amount: "$39.990"
        change-datetime: "2024-06-15T10:00:00Z"
